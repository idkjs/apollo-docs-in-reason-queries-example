// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ApolloClient from "reason-apollo-client/src/ApolloClient.bs.js";
import * as Client from "@apollo/client";
import * as ApolloClient__React_Types from "reason-apollo-client/src/@apollo/client/react/types/ApolloClient__React_Types.bs.js";
import * as ApolloClient__Link_Http_HttpLink from "reason-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
import * as ApolloClient__Cache_InMemory_InMemoryCache from "reason-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query   {
    dogs  {
      __typename
      id
      breed
    }
  }
`);

function parse(value) {
  var value$1 = value.dogs;
  return {
          dogs: !(value$1 == null) ? value$1.map(function (value) {
                  if (!(value == null)) {
                    return {
                            __typename: value.__typename,
                            id: value.id,
                            breed: value.breed
                          };
                  }
                  
                }) : undefined
        };
}

function serialize(value) {
  var value$1 = value.dogs;
  var dogs = value$1 !== undefined ? value$1.map(function (value) {
          if (value === undefined) {
            return null;
          }
          var value$1 = value.breed;
          var value$2 = value.id;
          var value$3 = value.__typename;
          return {
                  __typename: value$3,
                  id: value$2,
                  breed: value$1
                };
        }) : null;
  return {
          dogs: dogs
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var GetDogs_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var GetDogs_refetchQueryDescription = include.refetchQueryDescription;

var GetDogs_useLazy = include.useLazy;

var GetDogs_useLazyWithVariables = include.useLazyWithVariables;

var GetDogs = {
  GetDogs_inner: GetDogs_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: GetDogs_refetchQueryDescription,
  use: use,
  useLazy: GetDogs_useLazy,
  useLazyWithVariables: GetDogs_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  query GetDogPhoto($breed: String!)  {
    dog(breed: $breed)  {
      __typename
      id
      displayImage
    }
  }
`);

function parse$1(value) {
  var value$1 = value.dog;
  var tmp;
  if (value$1 == null) {
    tmp = undefined;
  } else {
    var value$2 = value$1.displayImage;
    tmp = {
      __typename: value$1.__typename,
      id: value$1.id,
      displayImage: !(value$2 == null) ? value$2 : undefined
    };
  }
  return {
          dog: tmp
        };
}

function serialize$1(value) {
  var value$1 = value.dog;
  var dog;
  if (value$1 !== undefined) {
    var value$2 = value$1.displayImage;
    var displayImage = value$2 !== undefined ? value$2 : null;
    var value$3 = value$1.id;
    var value$4 = value$1.__typename;
    dog = {
      __typename: value$4,
      id: value$3,
      displayImage: displayImage
    };
  } else {
    dog = null;
  }
  return {
          dog: dog
        };
}

function serializeVariables$1(inp) {
  return {
          breed: inp.breed
        };
}

function makeVariables$1(breed, param) {
  return {
          breed: breed
        };
}

var GetDogPhoto_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var use$1 = include$1.use;

var GetDogPhoto_refetchQueryDescription = include$1.refetchQueryDescription;

var GetDogPhoto_useLazy = include$1.useLazy;

var GetDogPhoto_useLazyWithVariables = include$1.useLazyWithVariables;

var GetDogPhoto = {
  GetDogPhoto_inner: GetDogPhoto_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  refetchQueryDescription: GetDogPhoto_refetchQueryDescription,
  use: use$1,
  useLazy: GetDogPhoto_useLazy,
  useLazyWithVariables: GetDogPhoto_useLazyWithVariables
};

function App$DogPhoto(Props) {
  var breed = Props.breed;
  var variables = {
    breed: breed
  };
  var queryResult = Curry.app(use$1, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        true,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        variables
      ]);
  var match = queryResult.data;
  var error = queryResult.error;
  if (queryResult.networkStatus === 3) {
    return React.createElement("p", undefined, "Refetching!");
  }
  if (queryResult.loading) {
    return null;
  }
  if (error !== undefined) {
    return "Error!: " + error.message;
  }
  if (match === undefined) {
    return null;
  }
  var match$1 = match.dog;
  if (match$1 !== undefined) {
    return React.createElement("div", undefined, React.createElement("div", undefined, Belt_Option.getWithDefault(Belt_Option.map(match$1.displayImage, (function (displayImage) {
                              return React.createElement("img", {
                                          style: {
                                            height: "100",
                                            width: "100"
                                          },
                                          src: displayImage
                                        });
                            })), null)), React.createElement("button", {
                    onClick: (function (param) {
                        ApolloClient__React_Types.QueryResult.refetch(queryResult, {
                              breed: breed
                            });
                        
                      })
                  }, "Refetch!"));
  } else {
    return null;
  }
}

var DogPhoto = {
  make: App$DogPhoto
};

function App$Dogs(Props) {
  var onDogSelected = Props.onDogSelected;
  var result = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match = result.data;
  var error = result.error;
  if (result.loading) {
    return "Loading...";
  }
  if (error !== undefined) {
    return "Error!: " + error.message;
  }
  if (match === undefined) {
    return null;
  }
  var dogs = Belt_Array.keepMap(Belt_Option.getWithDefault(match.dogs, []), (function (d) {
          return d;
        }));
  return React.createElement("select", {
              name: "dog",
              onChange: onDogSelected
            }, Belt_Array.map(dogs, (function (dog) {
                    return React.createElement("option", {
                                key: dog.id,
                                value: dog.breed
                              }, dog.breed);
                  })));
}

var Dogs = {
  make: App$Dogs
};

var client = ApolloClient.make(undefined, undefined, undefined, Caml_option.some(ApolloClient__Link_Http_HttpLink.make((function (param) {
                return "https://71z1g.sse.codesandbox.io/";
              }), undefined, undefined, undefined, undefined, undefined, undefined, undefined)), ApolloClient__Cache_InMemory_InMemoryCache.make(undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, true, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

function App(Props) {
  var match = React.useState(function () {
        
      });
  var setSelectedDog = match[1];
  var selectedDog = match[0];
  var onDogSelected = function ($$event) {
    $$event.preventDefault();
    return Curry._1(setSelectedDog, (function (param) {
                  return $$event.target.value;
                }));
  };
  return React.createElement(Client.ApolloProvider, {
              client: client,
              children: React.createElement("div", undefined, React.createElement("h2", undefined, "Building Query components " + "ðŸš€"), selectedDog !== undefined ? React.createElement(App$DogPhoto, {
                          breed: selectedDog
                        }) : null, React.createElement(App$Dogs, {
                        onDogSelected: onDogSelected
                      }))
            });
}

var ApolloQueryResult;

var QueryResult;

var make = App;

export {
  ApolloQueryResult ,
  QueryResult ,
  GetDogs ,
  GetDogPhoto ,
  DogPhoto ,
  Dogs ,
  client ,
  make ,
  
}
/* query Not a pure module */
